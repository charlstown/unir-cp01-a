pipeline {
    agent none
    options {
        // Evitar la verificación (checkout) predeterminada del SCM
        skipDefaultCheckout(true)
    }
    stages {
        stage('Get Code') {
            agent any
            steps {
                // Imprimir información del usuario y el host actual
                sh '''
                whoami
                hostname
                '''

                // Configurar Git y clonar el repositorio
                sh 'git config --global --add safe.directory /var/jenkins_home/workspace/O24/test-1'
                git 'https://github.com/charlstown/unir-cp01-a.git'

                // Guardar los archivos del proyecto para las siguientes etapas
                stash includes: '**', name: 'project-files'
            }
            post {
                always {
                    // Limpiar el espacio de trabajo después de esta etapa
                    cleanWs()
                }
            }
        }

        stage('Run Flask') {
            agent { label 'agent-vi' }
            environment {
                PYTHONPATH = "${WORKSPACE}"
            }
            steps {
                script {
                    // Iniciar el servidor Flask en segundo plano
                    sh '''
                    echo "Starting Flask server..."
                    echo "PYTHONPATH: ${PYTHONPATH}"
                    export PYTHONPATH=$WORKSPACE
                    export FLASK_APP=app/api.py
                    nohup flask run --host=127.0.0.1 --port=5000 > /tmp/flask.log 2>&1 &
                    echo $! > /tmp/flask.pid
                    '''

                    // Esperar a que el servidor Flask esté listo
                    sh '''
                    echo "Waiting for Flask to be ready..."
                    SERVER_READY=0
                    for i in {1..10}; do
                        if curl -s http://127.0.0.1:5000 > /dev/null; then
                            echo "Flask is running!"
                            SERVER_READY=1
                            break
                        fi
                        echo "Flask is not ready, retrying in 1 second..."
                        sleep 1
                    done
                    if [ $SERVER_READY -eq 0 ]; then
                        echo "Flask server did not start in time. Check /tmp/flask.log for details."
                        exit 1
                    fi
                    '''
                }
            }
        }

        stage('Testing and Analysis') {
            parallel {
                stage('Unit') {
                    agent { label 'agent-vi' }
                    environment {
                        PYTHONPATH = "${WORKSPACE}"
                    }
                    steps {
                        // Recuperar los archivos del proyecto
                        unstash 'project-files'

                        // Imprimir información del usuario y el host actual
                        sh '''
                        echo "[UNIT TESTS AGENT]"
                        whoami
                        hostname
                        '''

                        // Ejecutar las pruebas unitarias con cobertura
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh 'python3 -m coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest --junitxml=result-unit.xml test/unit'
                        }

                        // Publicar los resultados inmediatamente para reflejar el estado en el pipeline
                        junit 'result-unit.xml'

                        // Guardar los resultados de las pruebas unitarias
                        stash includes: 'result-unit.xml', name: 'unit-test-results'
                    }
                    post {
                        always {
                            // Limpiar el espacio de trabajo después de esta etapa
                            cleanWs()
                        }
                    }
                }

                stage('REST') {
                    agent { label 'agent-vi' }
                    environment {
                        PYTHONPATH = "/home/vi/jenkins/workspace/cp_1.2/reto2"
                    }
                    steps {
                        // Recuperar los archivos del proyecto
                        unstash 'project-files'

                        // Imprimir información del usuario y el host actual
                        sh '''
                        echo "[REST TESTS AGENT]"
                        whoami
                        hostname
                        '''

                        // Ejecutar las pruebas REST
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                            python3 -m pytest --junitxml=result-rest.xml test/rest
                            '''
                        }

                        // Publicar los resultados inmediatamente para reflejar el estado en el pipeline
                        junit 'result-rest.xml'

                        // Guardar los resultados de las pruebas REST
                        stash includes: 'result-rest.xml', name: 'rest-test-results'
                    }
                }

                stage('Static') {
                    agent { label 'agent-jinx' }
                    steps {
                        // Recuperar los archivos del proyecto
                        unstash 'project-files'

                        // Imprimir información del usuario y el host actual
                        sh '''
                        whoami
                        hostname
                        '''

                        // Ejecutar flake8 para el análisis estático
                        sh 'python3 -m flake8 --format=pylint --exit-zero --output-file=result-flake8.out app'

                        // Publicar los resultados inmediatamente para reflejar el estado en el pipeline
                        recordIssues tools: [flake8(pattern: 'result-flake8.out')],
                                     qualityGates: [
                                         [threshold: 8, type: 'TOTAL', unstable: true],
                                         [threshold: 10, type: 'TOTAL', unhealthy: true]
                                     ]

                        // Guardar los resultados del análisis estático
                        stash includes: 'result-flake8.out', name: 'flake8-results'
                    }
                    post {
                        always {
                            // Limpiar el espacio de trabajo después de esta etapa
                            cleanWs()
                        }
                    }
                }

                stage('Security') {
                    agent { label 'agent-jinx' }
                    steps {
                        // Recuperar los archivos del proyecto
                        unstash 'project-files'

                        // Imprimir información del usuario y el host actual
                        sh '''
                        echo "[SECURITY ANALYSIS AGENT]"
                        whoami
                        hostname
                        '''

                        // Ejecutar Bandit para el análisis de seguridad
                        sh '''
                        bandit -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}" || true
                        '''

                        // Publicar los resultados inmediatamente para reflejar el estado en el pipeline
                        recordIssues tools: [pyLint(name: 'bandit', pattern: 'bandit.out')],
                                     qualityGates: [
                                         [threshold: 2, type: 'TOTAL', unstable: true],
                                         [threshold: 4, type: 'TOTAL', unhealthy: true]
                                     ]

                        // Guardar los resultados del análisis de seguridad
                        stash includes: 'bandit.out', name: 'bandit-results'
                    }
                    post {
                        always {
                            // Limpiar el espacio de trabajo después de esta etapa
                            cleanWs()
                        }
                    }
                }
            }
        }

        stage('Performance') {
            agent { label 'agent-vi' }
            steps {
                // Recuperar los archivos del proyecto
                unstash 'project-files'

                // Imprimir información del usuario y el host actual
                sh '''
                echo "[PERFORMANCE TESTS AGENT]"
                whoami
                hostname
                '''

                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '''
                    ls
                    curl -s http://localhost:5000
                    curl http://localhost:5000/calc/add/1/2
                    '''
                }

                // Ejecutar pruebas de rendimiento con JMeter
                sh '/opt/apache-jmeter-5.6.3/bin/jmeter -n -t test/jmeter/flask.jmx -f -l flask.jtl'

                // Guardar los resultados de las pruebas de rendimiento
                stash includes: 'flask.jtl', name: 'performance-results'

                // Publicar los resultados inmediatamente para reflejar el estado en el pipeline
                perfReport sourceDataFiles: 'flask.jtl'

                // Detener el servidor Flask
                sh '''
                if [ -f /tmp/flask.pid ]; then
                    kill $(cat /tmp/flask.pid)
                    rm /tmp/flask.pid
                fi
                '''
            }
            post {
                always {
                    // Limpiar el espacio de trabajo después de esta etapa
                    cleanWs()
                }
            }
        }
    }
}
