pipeline {
    agent none
    options {
        skipDefaultCheckout(true) // Evitar checkout por defecto
    }
    stages {
        stage('Get Code') {
            agent any
            steps {
                sh '''
                whoami
                hostname
                '''
                // Configurar git y clonar el repositorio
                sh 'git config --global --add safe.directory /var/jenkins_home/workspace/O24/test-1'
                git 'https://github.com/charlstown/unir-cp01-a.git'

                // Stash de los archivos del proyecto para las siguientes etapas
                stash includes: '**', name: 'project-files'
            }
            post {
                always {
                    cleanWs() // Limpieza del workspace
                }
            }
        }

        stage('Testing and Analysis') {
            parallel {
                stage('Unit') {
                    agent { label 'agent-vi' }
                    environment {
                        PYTHONPATH = "/var/jenkins_home/workspace/cp_1.2/reto_1"
                    }
                    steps {
                        unstash 'project-files' // Recuperar los archivos del proyecto
                        sh '''
                        echo "[UNIT TESTS AGENT]"
                        whoami
                        hostname
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            // Ejecutar las pruebas unitarias con cobertura
                            sh 'python3 -m coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest --junitxml=result-unit.xml test/unit'
                        }
                        // Stash de los resultados de pruebas unitarias
                        stash includes: 'result-unit.xml', name: 'unit-test-results'
                    }
                    post {
                        always {
                            cleanWs() // Limpieza del workspace
                        }
                    }
                }

                stage('REST') {
                    agent { label 'agent-vi' }
                    environment {
                        PYTHONPATH = "/var/jenkins_home/workspace/cp_1.2/reto_1"
                    }
                    steps {
                        unstash 'project-files' // Recuperar los archivos del proyecto
                        sh '''
                        echo "[REST TESTS AGENT]"
                        whoami
                        hostname
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            // Iniciar el servidor Flask
                            sh '''
                            export FLASK_APP=app/api.py
                            echo "Starting Flask server..."
                            flask run --host=127.0.0.1 --port=5000 > flask.log 2>&1 &
                            echo $! > flask.pid
                            '''

                            // Esperar a que el servidor Flask estÃ© listo
                            sh '''
                            echo "Waiting for Flask to be ready..."
                            for i in {1..10}; do
                                if curl -s http://127.0.0.1:5000 > /dev/null; then
                                    echo "Flask is up and running!"
                                    break
                                fi
                                sleep 1
                            done
                            '''

                            // Run REST tests
                            sh '''
                            python3 -m pytest --junitxml=result-rest.xml test/rest
                            '''
                        }
                        // Stash de los resultados de pruebas REST
                        stash includes: 'result-rest.xml', name: 'rest-test-results'
                    }
                    post {
                        always {
                            cleanWs() // Limpieza del workspace
                        }
                    }
                }

                stage('Static') {
                    agent { label 'agent-jinx' }
                    steps {
                        unstash 'project-files' // Recuperar los archivos del proyecto
                        sh '''
                        whoami
                        hostname
                        '''
                        // Ejecutar flake8
                        sh 'python3 -m flake8 --format=pylint --exit-zero --output-file=result-flake8.out app'

                        // Stash de los resultados de flake8
                        stash includes: 'result-flake8.out', name: 'flake8-results'
                    }
                    post {
                        always {
                            cleanWs() // Limpieza del workspace
                        }
                    }
                }

                stage('Security') {
                    agent { label 'agent-jinx' }
                    steps {
                        unstash 'project-files' // Recuperar los archivos del proyecto
                        sh '''
                        echo "[SECURITY ANALYSIS AGENT]"
                        whoami
                        hostname
                        '''
                        // Ejecutar bandit
                        sh '''
                        bandit -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}" || true
                        '''

                        // Stash de los resultados de bandit
                        stash includes: 'bandit.out', name: 'bandit-results'
                    }
                    post {
                        always {
                            cleanWs() // Limpieza del workspace
                        }
                    }
                }
            }
        }

        stage('Performance') {
            agent { label 'agent-vi' }
            steps {
                unstash 'project-files' // Recuperar los archivos del proyecto
                sh '''
                echo "[PERFORMANCE TESTS AGENT]"
                whoami
                hostname
                '''
                sh '''
                ls test/jmeter
                ls /opt/
                '''
                // Ejecutar pruebas de rendimiento
                sh '/opt/jmeter/bin/jmeter -n -t test/jmeter/flask.jmx -f -l flask.jtl'

                // Stash de los resultados de rendimiento
                stash includes: 'flask.jtl', name: 'performance-results'

                // Stop Flask server after tests
                sh '''
                if [ -f flask.pid ]; then
                    echo "Stopping Flask server..."
                    kill $(cat flask.pid)
                    rm flask.pid
                fi
                '''
            }
            post {
                always {
                    cleanWs() // Limpieza del workspace
                }
            }
        }

        stage('Publish Results') {
            agent any
            steps {
                // Unstash and publish unit test results
                unstash 'unit-test-results'
                junit 'result-unit.xml'

                // Unstash and publish REST test results
                unstash 'rest-test-results'
                junit 'result-rest.xml'

                // Unstash and publish flake8 results
                unstash 'flake8-results'
                recordIssues tools: [flake8(pattern: 'result-flake8.out')],
                             qualityGates: [
                                 [threshold: 8, type: 'TOTAL', unstable: true],
                                 [threshold: 10, type: 'TOTAL', unhealthy: true]
                             ]

                // Unstash and publish bandit results
                unstash 'bandit-results'
                recordIssues tools: [pyLint(name: 'bandit', pattern: 'bandit.out')],
                             qualityGates: [
                                 [threshold: 2, type: 'TOTAL', unstable: true],
                                 [threshold: 4, type: 'TOTAL', unhealthy: true]
                             ]

                // Unstash and publish performance results
                unstash 'performance-results'
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
    }
}
